services:
  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: tivon1234
      POSTGRES_DB: admin
    networks:
      - academia
    volumes:
      - postgres_data:/var/lib/postgresql/data #Persistencia de datos, aunque se elimine el contenedor
    deploy:
      restart_policy:
        condition: on-failure # Sólo se reinicia el contenedor sí falla
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 5s
      retries: 5

  appdocker:
    image: ghcr.io/pamela-guevara/academianovit:1.0.0
    environment:
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=admin;Username=admin;Password=tivon1234
    networks:
      - academia
    ports:
      - target: 8080 # Puerto del contenedor
        published: 5010 # Puerto del host
        protocol: tcp
        mode: ingress # Balancea el tráfico entre réplicas
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure # sólo resetea la réplica que falle
      placement:
        constraints: [node.role == manager] # las réplicas correrán en el nodo manager
    depends_on:
      - postgres
  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - academia
    deploy:
      mode: global  # una instancia por nodo del Swarm
      restart_policy:
        condition: on-failure
    ports:
      - target: 9100
        published: 9100
        protocol: tcp
        mode: host  # expone el puerto 9100 directamente en el host



networks:
  academia:
    external: true

volumes:
  postgres_data:
